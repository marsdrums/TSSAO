<jittershader name="default">
	<description>Temporal-supersampled screen-space ambient occlusion </description>
	<param name="buffer_col" 		type="int" 		default="0" />
	<param name="buffer_norm" 		type="int" 		default="1" />
	<param name="buffer_pos" 		type="int" 		default="2" />
	<param name="buffer_vel"    	type="int"    	default="3" />
	<param name="history" 			type="int" 		default="4" />
	<param name="history_col"  		type="int"   	default="5" />
	<param name="buffer_rand"   	type="int"  	default="6" />
	<texture file="random-tex.png" 	type="float16" 	unit="6" rectangle="0" filter="none none" wrap="repeat repeat"/>
	<param name="MVP" 				type="mat4" 	state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="P" 				type="mat4" 	state="CAM_PROJECTION_MATRIX" />
	<param name="invP" 				type="mat4" 	state="PROJECTION_MATRIX" transform="INVERSE" />
	<param name="uv"   				type="vec2"   	state="TEXCOORD" />
	<param name="textureMatrix0" 	type="mat4" 	state="TEXTURE0_MATRIX" />
	<param name="pos" 				type="vec3" 	state="POSITION" />
	<param name="radius"			type="float"   	default="2.4" />
	<param name="intensity"			type="float"   	default="2.4" />
	<param name="bias"  			type="float"  	default="0.001" />
	<param name="frame"   			type="float"  	default="0." />
	<param name="farClip"  			type="float"    state="FAR_CLIP" />
	<language name="glsl" version="1.5">
		<bind param="buffer_col" 		program="fp" />
		<bind param="buffer_norm" 		program="fp" />
		<bind param="buffer_pos"  		program="fp" />
		<bind param="buffer_vel"   		program="fp" />
		<bind param="history"   		program="fp" />
		<bind param="history_col"   	program="fp" />
		<bind param="buffer_rand"  		program="fp" />
		<bind param="MVP" 				program="vp" />
		<bind param="P"   				program="fp" />
		<bind param="invP"   			program="fp" />
		<bind param="uv"   				program="vp" />
		<bind param="textureMatrix0" 	program="vp" />
		<bind param="textureMatrix0" 	program="fp" />
		<bind param="pos" 				program="vp" />
		<bind param="radius"  			program="fp" />
		<bind param="intensity"  		program="fp" />
		<bind param="bias"  			program="fp" />
		<bind param="frame"   			program="fp" />
		<bind param="farClip"     		program="fp" />
<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

uniform mat4 MVP;
uniform mat4 textureMatrix0;
uniform vec3 farCorner;


out jit_PerVertex {
	smooth vec2 normUV;
	smooth vec2 uv;
} jit_out;

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 1., 1.)).xy;
	jit_out.normUV = uv;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
#define TWOPI 6.28318531
#define PI 3.14159265

uniform mat4 			P, invP, textureMatrix0;
uniform sampler2DRect 	buffer_col, buffer_norm, buffer_pos, buffer_vel, history, history_col;
uniform sampler2D  		buffer_rand;
uniform float 			frame, radius, intensity, bias, farClip;

	const float rayStep = 0.01;
	const float minRayStep = 0.01;
	const int maxSteps =  500;
	const float searchDist = 5.;
	const int numBinarySearchSteps = 10;
	const float reflectionsSpecularFalloffExponent = 3.0;

in jit_PerVertex {
	smooth vec2 normUV;
	smooth vec2 uv;
} jit_in;

layout (location = 0) out vec4 occlusion;
layout (location = 1) out vec4 GI;
layout (location = 2) out vec4 ref;

vec3 hash( uvec3 x )
{
    x = ((x>>8U)^x.yzx)*1103515245U;
    x = ((x>>8U)^x.yzx)*1103515245U;
    x = ((x>>8U)^x.yzx)*1103515245U;
    
    return vec3(x)*(1.0/float(0xffffffffU));
}
float halton(int base, int index)
{
	float result = 0.;
	float f = 1.;
	while (index > 0)
	{
		f = f / float(base);
		result += f * float(index % base);
		index = index / base; 
        //index = int(floor(float(index) / float(base)));
	}
	return result;
}
vec2 	getRandom(in vec2 uv){
	return normalize(texture(buffer_rand, uv ).xy * 2.0 - 1.0); 
}
void 	getAOandBounce(in vec2 tcoord,in vec2 uv, in vec3 p, in vec3 cnorm, inout float oc, inout vec3 bounce){

				uv 		= 	(textureMatrix0*vec4(uv, 1., 1.)).xy;
		vec3 	diff 	= 	texture(buffer_pos, tcoord + uv).xyz - p; 
		vec3 	col 	= 	texture(buffer_col, tcoord + uv).xyz; 
		//vec3 	nor 	= 	texture(buffer_norm, tcoord + uv).xyz;
   		vec3 	v 		= 	normalize(diff); 
   		float 	d 		= 	length(diff); 
   		float 	att 	= 	1./(1. + d*d); //*** i squared the distance
   		float 	facing 	= 	max(0.0,dot(cnorm,v)-bias);
  				oc 		+= 	facing*intensity*att; 
  				bounce 	+= 	facing > 0. ? col : col*0.3;//*** super empirical way to minimize the light contribution coming from sources not in front of the fragment we're shading
}

vec4 binarySearch(inout vec3 r, inout vec3 hitCoord, inout float dDepth){
	float depth;
	vec4 projectedCoord;
	for(int i = 0; i < numBinarySearchSteps; i++){
		projectedCoord = P * vec4(hitCoord, 1.);
		projectedCoord.xy /= projectedCoord.w;
		projectedCoord.xy = projectedCoord.xy * 0.5 + vec2(0.5);

		depth = texture(buffer_pos, (textureMatrix0*vec4(projectedCoord.xy, 1., 1.)).xy ).z; //metti rect coordinates
		dDepth = hitCoord.z - depth;
		r *= 0.5;
		hitCoord += dDepth > 0. ? r : -r;

	}
	projectedCoord = P * vec4(hitCoord, 1.);
	projectedCoord.xy /= projectedCoord.w;
	projectedCoord.xy = projectedCoord.xy * 0.5 + vec2(0.5);

	return vec4(projectedCoord.xy, depth, 1.);
}

vec4  	getReflections(in vec3 r, inout vec3 hitCoord, inout float dDepth, inout float iterationCount, in vec3 p){

		r *= rayStep;
	float depth;
	int steps;
	vec4 projectedCoord;
	int i;
	for (i = 0; i < maxSteps; i++){

		hitCoord += r;
		projectedCoord = P * vec4(hitCoord, 1.);
		projectedCoord.xy /= projectedCoord.w;
		projectedCoord.xy = projectedCoord.xy * 0.5 + vec2(0.5);

		depth = texture(buffer_pos, (textureMatrix0*vec4(projectedCoord.xy, 1., 1.)).xy ).z;

		if(depth >= farClip){
			continue;
		}

		dDepth = hitCoord.z - depth;

		if((r.z - dDepth) < 1.2){
			if(dDepth <= 0.){
				vec4 result;
				result = vec4(binarySearch(r, hitCoord, dDepth)); 
				iterationCount = float(steps) / float(maxSteps);
				return result;
			}
		}

		steps++;
	}
	iterationCount = float(steps) / float(maxSteps);
	return vec4(projectedCoord.xy, depth, 0.);
}

/************************************ Temporal-supersampled SSAO*********************************************************
based on: https://publik.tuwien.ac.at/files/PubDat_191582.pdf
and: https://www.gamedev.net/tutorials/_/technical/graphics-programming-and-theory/a-simple-and-practical-approach-to-ssao-r2753/
******************************************************************************************************************************/
void main(void) {



  	const 	vec2 	vec[4] 	= 	vec2[] (	vec2(+1,+0),
  											vec2(-1,+0), 
  											vec2(+0,+1),
  											vec2(+0,-1)
  										);

  	vec3 	p 			= 	texture(buffer_pos, jit_in.uv).xyz;
  	vec3 	n 			= 	normalize(texture(buffer_norm, jit_in.uv).xyz);
    vec2 	vel 		= 	texture(buffer_vel, jit_in.uv).rg;
    vec2 	histUV 		= 	jit_in.normUV - vel;
  	vec3 	aoHistory 	= 	texture(history, (textureMatrix0*vec4(histUV.x, 1. - histUV.y, 1., 1.)).xy).xyz; //occ, iterCount, prevDepth
  	vec3  	colHistory 	=	texture(history_col, (textureMatrix0*vec4(histUV.x, 1. - histUV.y, 1., 1.)).xy).xyz;
  	float  	aoPrev 		= 	aoHistory.x;
  	float   iterCount 	= 	aoHistory.y;
  	float   prevDepth 	= 	aoHistory.z;

  	int iterations = 1;
  	int aoSamples = 4;

  	//disocclusion?
    if(histUV.x < 0. || histUV.x >= 1. || histUV.y < 0. || histUV.y >= 1. || abs(1. - (p.z / prevDepth)) > 0.1)
    {
    		iterCount 	= 0.;
    		iterations  = 2;
    }

  	//**SSAO Calculation**//
  	float 	ao 		= 	0.0;
  	vec3 	bounce  = 	vec3(0.); 

  	for (int j = 0; j < iterations; j++){
  		vec2 	rand 	= 	getRandom(vec2(mod(jit_in.normUV.x + float(j)*0.01, 1.), jit_in.normUV.y + iterCount));  
    	float   randRad = 	hash(uvec3(jit_in.uv, iterCount*987.6543+j*10.)).x;
    			randRad =  	pow(randRad, 1.5); //seems to increase the details 
  		float 	rad 	= 	radius*randRad/p.z; //ditsance squared to take more samples close to the fragment

	  	for (int i = 0; i < aoSamples; i++){
	  		vec2 	coord1 = reflect(vec[i],rand)*rad; 
	  		vec2 	coord1_07 = coord1*0.707;
	    	vec2 	coord2 = vec2(coord1_07.x - coord1_07.y, coord1_07.x + coord1_07.y); 
	    
	    			getAOandBounce(jit_in.uv,coord1*0.25, 	p, n, ao, bounce); 
	    			getAOandBounce(jit_in.uv,coord2*0.5,	p, n, ao, bounce); 
	    			getAOandBounce(jit_in.uv,coord1*0.75, 	p, n, ao, bounce); 
	    			getAOandBounce(jit_in.uv,coord2, 		p, n, ao, bounce); 
	  	}
  	}

  	float  	nSamps 	= 	float(aoSamples)*float(iterations)*4.;
	  		ao 		/=	nSamps; 
	  		ao 		= 	clamp(ao, 0., 1.);

	  		bounce 	/= 	nSamps;

	float  	blend 		=	clamp(iterCount*100., 0., 0.9);
	//blend = 0.;
	  		ao 			= 	mix(ao, aoPrev, blend);
	  		iterCount 	+= 	0.01;
	  		prevDepth 	= 	p.z;
	  		occlusion	= 	vec4(ao, iterCount, prevDepth, 1.);
	  		blend 		*=  1.03;
/*
    vec3 neighbourhood[9] = vec3[] ( 	texture(history_col, jit_in.uv + vec2(-1, -1) ).xyz,
    									texture(history_col, jit_in.uv + vec2(+0, -1) ).xyz,
    									texture(history_col, jit_in.uv + vec2(+1, -1) ).xyz,
    									texture(history_col, jit_in.uv + vec2(-1, +0) ).xyz,
    									texture(history_col, jit_in.uv + vec2(+0, +0) ).xyz,
    									texture(history_col, jit_in.uv + vec2(+1, +0) ).xyz,
    									texture(history_col, jit_in.uv + vec2(-1, +1) ).xyz,
    									texture(history_col, jit_in.uv + vec2(+0, +1) ).xyz,
    									texture(history_col, jit_in.uv + vec2(+1, +1) ).xyz
    								);
    
    vec3 nmin = neighbourhood[0];
    vec3 nmax = neighbourhood[0];   
    for(int i = 1; i < 9; ++i) {
        nmin = min(nmin, neighbourhood[i]);
        nmax = max(nmax, neighbourhood[i]);
    }

    	  	bounce 		=	clamp(bounce, nmin, nmax);

*/
	  		bounce 		= 	clamp(bounce, vec3(0.), vec3(1.));

	  		bounce 		= 	mix(bounce, colHistory, blend); //the light bounces seem to work better with a greater feedback factor

	  		GI 	=	vec4(bounce, 1.);

// https://github.com/ImanolFotia/Epsilon-Engine/blob/master/bin/Release/shaders/SSR.frag
/*
	vec3 	v 		= normalize(p);
	vec3 	r 		= reflect(normalize(v), normalize(n));
			r       += ( hash(uvec3(jit_in.uv, 2)) - vec3(0.5) ) *0.001;
			r 		= normalize(r);
	vec3 	hitPos 	= p;


	float 	dDepth, iterationCount;
	vec4 	coords 			= getReflections(r * max(minRayStep, -p.z), hitPos, dDepth, iterationCount, p);
	vec2  	dCoords 		= smoothstep(0.2, 0.6, abs(vec2(0.5) - coords.xy));
	float 	sceenEdgeFactor = clamp(1. - (dCoords.x + dCoords.y), 0., 1.);
			sceenEdgeFactor *= smoothstep(0., 1., 1. - iterationCount);
			//sceenEdgeFactor *= coords.w < 0. ? 1. :  1. - (coords.w/1.2);
			//sceenEdgeFactor *= dot(n, r) > 0. ? 0. : 1.;
			//sceenEdgeFactor *= coords.w;
	//float multiplier = pow()
	vec3 	SSRnor   		= texture(buffer_norm, (textureMatrix0*vec4(coords.xy, 1., 1.)).xy ).rgb;
			sceenEdgeFactor = smoothstep(0., 1., sceenEdgeFactor*sceenEdgeFactor);
	vec3 	SSR 			= texture(buffer_col, (textureMatrix0*vec4(coords.xy, 1., 1.)).xy ).rgb * clamp(sceenEdgeFactor, 0., 0.9);
	float 	fresnel 		= pow(clamp(1. - dot(v, -n), 0., 1.), 5.) * 0.95 + 0.05;
			ref 			= vec4(SSR, fresnel);

*/
}

]]>
</program>
</language>
</jittershader>
