<jittershader name="default">
	<description>Bilateral filter </description>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;
			out jit_PerVertex {
				smooth vec2 uv;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(pos, 1.);
				jit_out.uv = (textureMatrix0*vec4(uv, 1., 1)).xy;
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				smooth vec2 uv;
			} jit_in;
			layout (location = 0) out vec4 outColor;
			
			uniform sampler2DRect tex0, tex1;
			uniform float scale;
			uniform mat4 textureMatrix0;

#define SIGMA 10.0
#define BSIGMA 0.1
//#define MSIZE 1

float normpdf(in float x, in float sigma)
{
	return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
}

/**************************** BILATERAL FILTER *********************************************
based on: https://www.shadertoy.com/view/4dfGDH
and: http://people.csail.mit.edu/sparis/bf_course/course_notes.pdf
******************************************************************************************/

void main()
{
	vec4 AOtexture = texture(tex0, jit_in.uv);
	float c = AOtexture.r;

	int MSIZE = AOtexture.y > 0.1 ? 5 : 5; //apply blurring only to new disoccluded fragments
	int kSize = (MSIZE-1)/2;
	float kernel[5];
	float final_ao = 0.;
	vec3 final_col = vec3(0.);
	
	//create the 1-D kernel
	float Z = 0.0;
	for (int j = 0; j <= kSize; ++j)
	{
		kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), SIGMA);
	}
	
	vec4 cc;
	vec3 col;
	float factor;
	float bZ = 1.0/normpdf(0.0, BSIGMA);
	//read out the texels
	for (int i=-kSize; i <= kSize; ++i)
	{
		for (int j=-kSize; j <= kSize; ++j)
		{
			vec2 uv = jit_in.uv+vec2(float(i),float(j));
			cc = texture(tex0, uv); 
			col = texture(tex1, uv).rgb;
			factor = normpdf(cc.z-AOtexture.z, BSIGMA)*bZ*kernel[kSize+j]*kernel[kSize+i];
			Z += factor;
			final_col += factor*col;
		}
	}
			
	outColor = vec4(final_col/Z, 1.);
	
}
]]>
</program>
</language>
</jittershader>
