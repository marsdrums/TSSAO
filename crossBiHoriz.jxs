<jittershader name="default">
	<description>Bilateral filter </description>
	<param name="tex0" type="int" default="0" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;
			out jit_PerVertex {
				smooth vec2 uv;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(pos, 1.);
				jit_out.uv = (textureMatrix0*vec4(uv, 1., 1)).xy;
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				smooth vec2 uv;
			} jit_in;
			layout (location = 0) out vec4 outColor;
			
			uniform sampler2DRect tex0;
			uniform float scale;
			uniform mat4 textureMatrix0;

#define SIGMA 10.0
#define BSIGMA 0.1
//#define MSIZE 1

float normpdf(in float x, in float sigma)
{
	return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
}

/**************************** BILATERAL FILTER *********************************************
based on: https://www.shadertoy.com/view/4dfGDH
and: http://people.csail.mit.edu/sparis/bf_course/course_notes.pdf
******************************************************************************************/

vec4	getSmooth(vec4 AOtexture){

	const 	float 	kernel[3] = float[3]	(	0.031225216, 0.033322271, 0.035206333);

	float 	Z = 0.0;
	vec4 	cc;
	float 	factor;
	float 	bZ = 1.0/normpdf(0.0, BSIGMA);
	float 	final_ao = 0.;
	//read out the texels
	for (int i=-1; i <= 1; ++i)
	{
		for (int j=-1; j <= 1; ++j)
		{
			vec2 	uv 		= jit_in.uv+vec2(float(i),float(j))*0.2;
					cc 		= texture(tex0, uv); 
					factor 	= normpdf(cc.z-AOtexture.z, BSIGMA)*bZ*kernel[1+j]*kernel[1+i];
					Z 		+= factor;
					final_ao += factor*cc.x;
		}
	}
			
	return vec4(final_ao/Z, AOtexture.gba);
}

vec4	getBlur(vec4 AOtexture){

	const 	float 	kernel[15] = float[15]	(	0.031225216, 0.033322271, 0.035206333, 
												0.036826804, 0.038138565, 0.039104044, 
												0.039695028, 0.039894000, 0.039695028, 
												0.039104044, 0.038138565, 0.036826804, 
												0.035206333, 0.033322271, 0.031225216);
	float 	Z = 0.0;
	vec4 	cc;
	float 	factor;
	float 	bZ = 1.0/normpdf(0.0, BSIGMA);
	float 	final_ao = 0.;
	//read out the texels
	for (int i=-7; i <= 7; ++i)
	{
		for (int j=-7; j <= 7; ++j)
		{
			vec2 	uv 		= jit_in.uv+vec2(float(i),float(j));
					cc 		= texture(tex0, uv); 
					factor 	= normpdf(cc.z-AOtexture.z, BSIGMA)*bZ*kernel[7+j]*kernel[7+i];
					Z 		+= factor;
					final_ao += factor*cc.x;
		}
	}
			
	return vec4(final_ao/Z, AOtexture.gba);
}

void main()
{
	vec4 	AOtexture = texture(tex0, jit_in.uv);
			outColor = AOtexture.y > 0.1 ? AOtexture : getBlur(AOtexture); //apply blurring only to new disoccluded fragments
}
]]>
</program>
</language>
</jittershader>
